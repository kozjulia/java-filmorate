-- удаляем все таблицы
drop table PUBLIC.likes IF exists;
drop table PUBLIC.friends IF exists;
drop table PUBLIC.reviews IF exists;
drop table PUBLIC.users IF exists;
drop table PUBLIC.rating_mpa IF EXISTS cascade;
drop table PUBLIC.film_genre IF exists;
drop table PUBLIC.genres IF exists;
drop table PUBLIC.film_director IF exists;
drop table PUBLIC.directors IF exists;
drop table PUBLIC.films IF exists;

-- создаем все таблицы
create TABLE IF NOT EXISTS users (
    user_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_name varchar(50),
    email varchar(50) NOT null,
    login varchar(50) NOT null,
    birthday date NOT null
);

create TABLE IF NOT EXISTS friends (
    request_friend_id bigint REFERENCES public.users(user_id) ON update RESTRICT ON delete CASCADE,
    response_friend_id bigint REFERENCES public.users(user_id) ON update RESTRICT ON delete CASCADE,
    CONSTRAINT FRIENDS_PK PRIMARY KEY (request_friend_id, response_friend_id)
);

create TABLE IF NOT EXISTS rating_mpa (
    rating_mpa_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rating_mpa_name varchar(15) NOT null,
    description varchar(100) NOT null
);

create TABLE IF NOT EXISTS films (
   film_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
   film_name varchar(100) NOT NULL,
   description varchar(200),
   release_date date,
   duration integer,
   rate integer,
   rating_mpa_id bigint REFERENCES public.rating_mpa(rating_mpa_id) ON update RESTRICT ON delete CASCADE
);

create TABLE IF NOT EXISTS genres (
    genre_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    genre_name varchar(100)
);

create TABLE IF NOT EXISTS film_genre (
    film_id bigint REFERENCES public.films(film_id) ON update RESTRICT ON delete CASCADE,
    genre_id bigint REFERENCES public.genres(genre_id) ON update RESTRICT ON delete CASCADE,
    CONSTRAINT FILM_GENRE_PK PRIMARY KEY (film_id, genre_id)
);

create TABLE IF NOT EXISTS directors (
  director_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  director_name varchar(100)
);

create TABLE IF NOT EXISTS film_director (
  film_id bigint REFERENCES public.films(film_id) ON update RESTRICT ON delete CASCADE,
  director_id bigint REFERENCES public.directors(director_id) ON update RESTRICT ON delete CASCADE,
  CONSTRAINT FILM_DIRECTOR_PK PRIMARY KEY (film_id, director_id)
);

create TABLE IF NOT EXISTS likes (
    user_id bigint REFERENCES public.users(user_id) ON update RESTRICT ON delete CASCADE,
    film_id bigint REFERENCES public.films(film_id) ON update RESTRICT ON delete CASCADE,
    CONSTRAINT LIKES_PK PRIMARY KEY (user_id, film_id)
);

create TABLE IF NOT EXISTS reviews (
    review_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    review_content varchar(1000) NOT NULL,
    is_positive boolean NOT NULL,
    user_id bigint REFERENCES public.users(user_id) ON update RESTRICT ON delete CASCADE,
    film_id bigint REFERENCES public.films(film_id) ON update RESTRICT ON delete CASCADE,
    useful integer NOT NULL
);